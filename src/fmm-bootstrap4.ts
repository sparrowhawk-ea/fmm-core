import { FmmFramework, FmmFrameworkItem } from './fmm';
import { FmmFrameworkItemBase } from './fmm-utils';

// =================================================================================================================================
//						F M M B O O T S T R A P 4
// =================================================================================================================================
export const FmmBootstrap4: FmmFramework = {
	createFrameworkItem(_: string, e: HTMLElement): FmmFrameworkItem {
		return e.tagName === 'INPUT' && ['checkbox', 'radio'].includes((e as HTMLInputElement).type) ? G.Check : G.Other;
	}
};

// =================================================================================================================================
// =================================================================================================================================
// =================================================	P R I V A T E	============================================================
// =================================================================================================================================
// =================================================================================================================================

// =================================================================================================================================
//						F R A M E W O R K I T E M
// =================================================================================================================================
class FrameworkItem extends FmmFrameworkItemBase {
	// =============================================================================================================================
	public constructor(wrapperClass: string) {
		super(wrapperClass);
	}

	// =============================================================================================================================
	public getError(_: string, e: HTMLElement, _n: HTMLElement, _v: boolean): string {
		if (!e.classList.contains('is-invalid') /* && !e.matches(':invalid')*/) return undefined;
		for (let s = e.nextElementSibling; s && s !== e; s = s.nextElementSibling) {
			if (s.classList.contains('invalid-feedback')) return s.textContent;
		}
		return undefined;
	}
}

// =================================================================================================================================
//						G
// =================================================================================================================================
const G = {
	Check: new FrameworkItem('form-check'),
	Other: new FrameworkItem('form-group')
};
